<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    tools:context=".MainActivity">

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="wrap_content">

        <LinearLayout
            android:id="@+id/content_layout"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:background="@android:color/white"
            android:padding="12dp">

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:textColor="@android:color/black"
                android:padding="16dp"
                android:textSize="24dp"
                android:text="Garbage Collection in Java"/>

            <View
                android:layout_width="match_parent"
                android:layout_height="1dp"
                android:background="#99000000" />

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:textColor="@android:color/black"
                android:padding="16dp"
                android:textSize="16dp"
                android:text="In Java destruction of object from memory is done automatically by the JVM. When there is no reference to an object, then that object is assumed to be no longer needed and the memory occupied by the object are released. This technique is called Garbage Collection. This is accomplished by the JVM."/>

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:textColor="@android:color/black"
                android:padding="16dp"
                android:textSize="16dp"
                android:text="Unlike C++ there is no explicit need to destroy object."/>

            <ImageView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:src="@drawable/garbage_collection"
                android:contentDescription="Image shows how garbage collection is performed on heap memory."/>

            <View
                android:layout_width="match_parent"
                android:layout_height="1dp"
                android:background="#99000000" />

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:textColor="@android:color/black"
                android:padding="16dp"
                android:textSize="20dp"
                android:text="Can the Garbage Collection be forced explicitly ?"/>

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:textColor="@android:color/black"
                android:padding="16dp"
                android:textSize="16dp"
                android:text="No, the Garbage Collection can not be forced explicitly. We may request JVM for garbage collection by calling System.gc() method. But This does not guarantee that JVM will perform the garbage collection."/>


            <View
                android:layout_width="match_parent"
                android:layout_height="1dp"
                android:background="#99000000" />

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:textColor="@android:color/black"
                android:padding="16dp"
                android:textSize="16dp"
                android:text="In Java destruction of object from memory is done automatically by the JVM. When there is no reference to an object, then that object is assumed to be no longer needed and the memory occupied by the object are released. This technique is called Garbage Collection. This is accomplished by the JVM."/>

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:textColor="@android:color/black"
                android:padding="16dp"
                android:textSize="16dp"
                android:text="Unlike C++ there is no explicit need to destroy object."/>

            <ImageView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:src="@drawable/garbage_collection"
                android:contentDescription="Image shows how garbage collection is performed on heap memory."/>

            <View
                android:layout_width="match_parent"
                android:layout_height="1dp"
                android:background="#99000000" />

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:textColor="@android:color/black"
                android:padding="16dp"
                android:textSize="20dp"
                android:text="Can the Garbage Collection be forced explicitly ?"/>

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:textColor="@android:color/black"
                android:padding="16dp"
                android:textSize="16dp"
                android:text="No, the Garbage Collection can not be forced explicitly. We may request JVM for garbage collection by calling System.gc() method. But This does not guarantee that JVM will perform the garbage collection."/>



        </LinearLayout>

    </ScrollView>

    <com.library.narrator.NarratorView
        android:id="@+id/narrator_view"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_alignParentEnd="true"
        android:layout_marginBottom="30dp"
        android:layout_marginEnd="30dp"
        app:orientation="vertical"
        app:color_play_pause_button="@android:color/holo_blue_dark"
        app:color_speak_stop_button="@android:color/holo_orange_dark"/>

</RelativeLayout>